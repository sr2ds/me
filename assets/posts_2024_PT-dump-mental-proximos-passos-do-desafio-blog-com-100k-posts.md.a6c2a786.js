import{_ as o,c as e,o as a,d as s}from"./app.d643be22.js";const f=JSON.parse('{"title":"Dump Mental: Pr\xF3ximos passos do desafio Blog com +100K posts","description":"","frontmatter":{},"headers":[],"relativePath":"posts/2024/PT-dump-mental-proximos-passos-do-desafio-blog-com-100k-posts.md"}'),r={name:"posts/2024/PT-dump-mental-proximos-passos-do-desafio-blog-com-100k-posts.md"},i=s('<h1 id="dump-mental-proximos-passos-do-desafio-blog-com-100k-posts" tabindex="-1">Dump Mental: Pr\xF3ximos passos do desafio Blog com +100K posts <a class="header-anchor" href="#dump-mental-proximos-passos-do-desafio-blog-com-100k-posts" aria-hidden="true">#</a></h1><p>Update do momento atual: Estou lidando com dois reposit\xF3rios, sendo que o primeiro \xE9 o Blog em PT-BR com 104K posts, e o segundo \xE9 em EN com 64K posts. Esse post \xE9 um dump mental a respeito dos desafios atuais.</p><p>Eu preferi separar os reposit\xF3rios para lidar com isso de forma separada, considerando que cada blog possui um dom\xEDnio pr\xF3prio e coisas diferentes, seria ainda mais complexo e pesado deixar no mesmo lugar.</p><p>Agora estou com um desafio de expandir esses projetos utilizando a arquitetura que eu escolhi iniciar e pretendo manter: Todo frontend gratuito no Netlify ou GitHub Pages.</p><p>Eu realmente n\xE3o quero mudar isso, quero os est\xE1ticos l\xE1 prontos, em algo gratuito, f\xE1cil de trocar e que &quot;nunca&quot; cai.</p><p>Isso n\xE3o significa que eu n\xE3o tenha custos e que eu n\xE3o precise de um backend, eu preciso sim e gasto tamb\xE9m. Mas eu resolvi que o core do projeto, que \xE9 o fornecimento do conte\xFAdo est\xE1tico para o usu\xE1rio nunca pode ficar indispon\xEDvel e precisa ficar realmente separado de coisas que exigem mais l\xF3gica. No meu caso eu tenho APIs tamb\xE9m, mas simplesmente para empoderar o que est\xE1 feito l\xE1 no modo est\xE1tico. Caso a API caia, o usu\xE1rio n\xE3o vai sofrer com isso. Por isso e tamb\xE9m pelo desafio que criei para eu mesmo, de escalar ao m\xE1ximo poss\xEDvel de forma gratuita, vou continuar meu plano.</p><p>O que est\xE1 acontecendo agora \xE9 que, al\xE9m da Build estar demorando muito e gastanto muita mem\xF3ria ram, trabalhar no reposit\xF3rio com tudo isso de arquivos acaba ficando pesado at\xE9 para o vscode. Se eu preciso abrir o diret\xF3rio dos posts, preciso aguardar. Quando preciso criar algo l\xE1 dentro, preciso aguardar. Al\xE9m do que, dependendo da mudan\xE7a, o vscode demora para receber o update disso na aba do reposit\xF3rio, afinal, realmente \xE9 muita coisa.</p><p>Ainda estou refletindo sobre os p\xF3s e contras a respeito da mudan\xE7a que estou planejando, mas quero documentar minha linha de racioc\xEDnio aqui.</p><p>Eu entendi que a Build consome muita mem\xF3ria pois toda lista de posts s\xE3o carregados na mem\xF3ria RAM no processo, realmente \xE9 complexo paginar isso estando no sistema de arquivos. Al\xE9m disso, o processo de build tamb\xE9m cria p\xE1ginas HTML com a pagina\xE7\xE3o de todos os posts. E tamb\xE9m cria p\xE1ginas com pagina\xE7\xE3o agrupando os posts por categorias.</p><p>Tudo isso \xE9 feito em mem\xF3ria, \xE9 muito f\xE1cil para o desenvolvedor simplesmente duplicar todo esse array para fazer as filtragens e tratamentos necess\xE1rios para a build acontecer. Para blogs pequenos, n\xE3o tem problema nenhum. Mas no meu caso, o processo ocupa muita mem\xF3ria naturalmente. E a\xED, no meio da build, o desenvolvedor pode ter simplesmente criado um novo array (sem refer\xEAncia direta) com os dados categorizados e fez o volume de mem\xF3ria crescer ainda mais.</p><p>Pensando nisso eu estou considerando algumas mudan\xE7as, a primeira delas seria parar de usar arquivos para os posts e armazenar meus posts em um sqlite. Isso vai aliviar meu trabalho no reposit\xF3rio, afinal n\xE3o ter\xE3o mais 100k arquivos. E ainda me dar\xE1 alguns poderes para realizar o processo de build usando pagina\xE7\xE3o direto do banco de dados. Ou seja, n\xE3o precisarei carregas tudo do sistema de arquivos para mem\xF3ria de uma vez. Al\xE9m disso, vou poder ter mais liberdade para expandir mais ainda de acordo com minha necessidade.</p><p>Vou listar aqui os pontos positivos dessa migra\xE7\xE3o:</p><ul><li>Poder paginar, filtrar e ordenar com mais facilidade;</li><li>Economizar recursos no processo de build e desenvolvimento;</li><li>Ganharei margem para escalar ainda mais em n\xFAmero de posts;</li><li>Mesclar os projetos considerando multi-lingua/multi-dominio;</li><li>Posso unir minhas outras ferramentas em uma \xFAnica tool cli.</li></ul><p>Convenhamos, eu j\xE1 migrei 3x de framework na medida que fui escalando esse projeto. Eu posso muito bem criar algo meu e ir implementando minhas features considerando meus pr\xF3prios objetivos, afinal eu acumulei alguma experi\xEAncia em rela\xE7\xE3o a como os frameworks funcionam e as limita\xE7\xF5es que eles possuem para meu tipo de necessidade.</p><p>Estou mapeando e planejando a implementa\xE7\xE3o inicial que vai me permitir sair do framework Zola e entrar no meu pr\xF3prio. O b\xE1sico para isso acontecer n\xE3o \xE9 algo muito complexo e conseguirei fazer em poucas semanas.</p><p>Claro que n\xE3o ter\xE1 tudo que o Zola possui mas j\xE1 ter\xE1 o essencial para eu rodar o projeto e ir implementando outras coisas aos poucos.</p><p>O desafio de criar algo assim tamb\xE9m me diverte, vou precisar aprender um pouco sobre template-engine, eu sempre fiz isso de forma manual, apenas fazendo replaces pontuais. Mas nesse caso vai ser legal usar um template-engine para evoluir mais rapido e permitir templates diferentes no framework.</p><p>Eu estou certo de que consigo fazer o processo ser mais leve usando um banco para iterar nos posts ao inv\xE9s de carregar tudo em mem\xF3ria como os frameworks de markdown fazem. Eu n\xE3o estou certo se consigo fazer o mesmo processo de build no mesmo tempo que tenho atualmente. Talvez possa melhorar esse fluxo uma vez que tudo estar\xE1 em minhas m\xE3os e posso re-organizar tudo livremente, mas inicialmente pode acontecer de, apesar de economizar mem\xF3ria e recursos, a build demorar um pouco mais. Duvido que isso aconte\xE7a, mas \xE9 algo que pode vir a acontecer por algum ponto que n\xE3o estou vendo agora.</p><p>Estou considerando criar isso em Python como um CLI baseado em Typer. Terei a chance de aprender algo novo e depois unificar outras tools que tenho no mesmo CLI. Se eu juntar tudo terei um toolkit completo para blog farm baseado em IA, ficar\xE1 mais f\xE1cil para eu manter tudo e poderei abrir para open-source algo mais completo e legal.</p><p>Eu tenho tools feitas em Javascript, inclusive um CLI completo para isso. Mas eu estou realmente gostando de Python por diversas raz\xF5es, posso listar aqui type-hint e Threads, ent\xE3o vou me divertir e melhorar minhas skills na linguagem.</p><p>O projeto novo dever\xE1 iniciar com algo basico como:</p><ul><li>Ler posts do sqlite;</li><li>Converter conte\xFAdo do post (inicialmente markdown) para HTML; <ul><li>Extra: \xC9 de se pensar, posso manter isso e abrir suporte para manter posts em outros formatos;</li><li>Extra: E tamb\xE9m posso manter o conversor para dar suporte a Markdown direto sem DB;</li></ul></li><li>Fazer o parse do conte\xFAdo para o template;</li><li>Criar os arquivos HTML;</li><li>Arquivos HTML de pagina\xE7\xE3o;</li><li>Sitemap completo (paginado a cada 30k posts);</li></ul><p>Com essa base de features eu consigo iniciar a migra\xE7\xE3o dos meus projetos, depois vou precisar de mais coisas, claro, como algo que fa\xE7a hot-reload para eu trabalhar nos templates, etc.</p><p>Vou parar por aqui, isso foi um dump da minha mem\xF3ria ram humana. Eu tenho pensado nisso faz algumas semanas e hoje peguei para refletir, planejar e fazer alguns rascunhos pensando na arquitetura disso, pontos positivos e pontos negativos. Ent\xE3o esse post \xE9 literalmente uma nota de di\xE1rio do que estou planejando fazer.</p><p>Obrigado por ler, at\xE9 mais \u{1F603}</p>',25),m=[i];function t(n,p,d,u,l,c){return a(),e("div",null,m)}const v=o(r,[["render",t]]);export{f as __pageData,v as default};
