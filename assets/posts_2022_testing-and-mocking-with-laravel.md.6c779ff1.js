import{_ as e,c as s,o as a,d as n}from"./app.d643be22.js";const C=JSON.parse('{"title":"Testing and Mocking with Laravel","description":"","frontmatter":{},"headers":[],"relativePath":"posts/2022/testing-and-mocking-with-laravel.md"}'),t={name:"posts/2022/testing-and-mocking-with-laravel.md"},o=n(`<h1 id="testing-and-mocking-with-laravel" tabindex="-1">Testing and Mocking with Laravel <a class="header-anchor" href="#testing-and-mocking-with-laravel" aria-hidden="true">#</a></h1><p>Working with micro-services or external services integrated, sometimes we need to simulate the behavior of some resources, for example, HTTP calls. The mock is a way to simulate this and ensure the quality of your feature without to need the external resource inside your test.</p><p>Let&#39;s to say that you have a integration with Stripe Payments and you need to test your software but don&#39;t want to create a new customer or new billings every time when you run your tests. To do it, we need mock the Stripe behavior.</p><p>In my example, I&#39;m using the Cashier to abstract the Stripe things, because this, I created a Service called PremiumService to abstract the Cashier functions and I mocked just the PremiumService.</p><p>To simplify our life, I like to create the mocks inside some Trait to just &#39;enable&#39; inside my tests, like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">&lt;?php</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">namespace Tests\\Traits;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">use App\\Services\\PremiumService;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">trait StripeMock</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    public function setStripeMock()</span></span>
<span class="line"><span style="color:#A6ACCD;">    {</span></span>
<span class="line"><span style="color:#A6ACCD;">        $this-&gt;mock(PremiumService::class, function ($mock) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            $mock-&gt;shouldReceive(&#39;createAsStripeCustomer&#39;)-&gt;andReturn();</span></span>
<span class="line"><span style="color:#A6ACCD;">            $mock-&gt;shouldReceive(&#39;cancelProductSubscription&#39;)-&gt;andReturn();</span></span>
<span class="line"><span style="color:#A6ACCD;">            $mock-&gt;shouldReceive(&#39;createStripeSubscription&#39;)-&gt;andReturn($mock);</span></span>
<span class="line"><span style="color:#A6ACCD;">            $mock-&gt;shouldReceive(&#39;getActiveSubscriptions&#39;)-&gt;andReturn([</span></span>
<span class="line"><span style="color:#A6ACCD;">                [&#39;id&#39; =&gt; 12, &#39;name&#39; =&gt; &#39;sub&#39;, &#39;items&#39; =&gt; [[&#39;id&#39; =&gt; 21]]],</span></span>
<span class="line"><span style="color:#A6ACCD;">            ]);</span></span>
<span class="line"><span style="color:#A6ACCD;">        })-&gt;makePartial();</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>With this, inside my tests of stripe, I just need need import the Trait and run <code>$this-&gt;setStripeMock();</code> to &#39;enable&#39; mock.</p><p>Let&#39;s to try understand the mock now.</p><p>In the first mock line <code>$this-&gt;mock(PremiumService::class, function ($mock)</code> we are creating the simulation of <code>PremiumService</code>, this way when the application initiate the Class, the mock will be used instead of real Class.</p><p>Inside of mock, we have defined the behavior about each method, like:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$mock-&gt;shouldReceive(&#39;createAsStripeCustomer&#39;)-&gt;andReturn();</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>It means that when call the method <code>createAsStripeCustomer</code>, the return will be void as expected in real code. But if you check the <code>getActiveSubscriptions</code>, we have a simple data returning simulating the original behavior.</p><p>To clarify more, the PremiumService is just one Class to abstract the <code>Cashier</code> methods, like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// PremiumService</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">public function getActiveSubscriptions(Company $company)</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    return $company-&gt;subscriptions()-&gt;active()-&gt;get();</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><hr><p>Here you can lean more about tests, I listed some good articles to help you:</p><p><a href="https://ralphjsmit.com/laravel-mock-dependencies" target="_blank" rel="noreferrer">https://ralphjsmit.com/laravel-mock-dependencies</a></p><p><a href="https://5balloons.info/how-to-mock-objects-in-phpunit-pest-tests-in-laravel" target="_blank" rel="noreferrer">https://5balloons.info/how-to-mock-objects-in-phpunit-pest-tests-in-laravel</a></p><p><a href="https://medium.com/the-andela-way/mock-testing-in-laravel-4a2fe15885b8" target="_blank" rel="noreferrer">https://medium.com/the-andela-way/mock-testing-in-laravel-4a2fe15885b8</a></p>`,19),i=[o];function l(p,c,r,d,h,m){return a(),s("div",null,i)}const A=e(t,[["render",l]]);export{C as __pageData,A as default};
