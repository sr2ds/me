import{_ as e,c as t,o as a,d as o}from"./app.a6b88af1.js";const y=JSON.parse('{"title":"Ensure a beaut code with Laravel Pint","description":"","frontmatter":{},"headers":[],"relativePath":"posts/2022/ensure-a-beaut-code-with-laravel-pint.md"}'),s={name:"posts/2022/ensure-a-beaut-code-with-laravel-pint.md"},n=o(`<h1 id="ensure-a-beaut-code-with-laravel-pint" tabindex="-1">Ensure a beaut code with Laravel Pint <a class="header-anchor" href="#ensure-a-beaut-code-with-laravel-pint" aria-hidden="true">#</a></h1><p>Hello,</p><p>This is my first full English post! So, I&#39;d starting with &quot;sorry&quot; for my wrongs, I&#39;m learning \u{1F603}</p><p>If you, like me, has Laravel inside your world and like beautiful things, I think you need to meet the Laravel Pint.</p><p>Laravel Pint help us to keep a good code style.</p><p>Working in one team without some code styler or some texteditor settings, usually we need to check a lot of spaces changes, breaklines, positions in the Pull Request review. It&#39;s so bad and sad to review one big PR with a lot of &#39;non-necessary-changes&#39;.</p><p>To solve this, we can setup the default code style for everyone of the time, this make more easy to check codes from other person and improve the PR Review moments.</p><p>With <code>Laravel Pint</code> is so easy setup a one default way to this, without extra settings like with pure PHP-CS.</p><p>Let&#39;s install de Pint with the normal command:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">composer require laravel/pint --dev</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>After installation, you can just run:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">./vendor/bin/pint </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>At the first time, you can see a lot of files changes, like in this my personal hobby project:</p><p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzakuzy0goznqxufrqh9.png" alt="Changes after run command"></p><p>Of course, in this simple way, you will need run the command before commits to ensure a correct code style. We can improve this we can to use some <code>pre-commit</code> hook, like a <code>grumphp</code> <a href="https://github.com/phpro/grumphp" target="_blank" rel="noreferrer">https://github.com/phpro/grumphp</a>.</p><p>In other post, I can write more about <code>grumphp</code>, but if you want, you can check the oficial docs to learn more.</p><p>For today it&#39;s only, thanks for read! \u{1F603}</p>`,17),r=[n];function i(p,l,c,d,h,u){return a(),t("div",null,r)}const f=e(s,[["render",i]]);export{y as __pageData,f as default};
