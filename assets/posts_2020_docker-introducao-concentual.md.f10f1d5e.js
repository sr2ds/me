import{_ as e,c as a,o,d as s}from"./app.d643be22.js";const h=JSON.parse('{"title":"Docker - Introdu\xE7\xE3o Concentual","description":"","frontmatter":{},"headers":[{"level":2,"title":"O que \xE9 Docker?","slug":"o-que-e-docker","link":"#o-que-e-docker","children":[]},{"level":2,"title":"Imagens","slug":"imagens","link":"#imagens","children":[]},{"level":2,"title":"Cont\xEAineres","slug":"conteineres","link":"#conteineres","children":[]}],"relativePath":"posts/2020/docker-introducao-concentual.md"}'),r={name:"posts/2020/docker-introducao-concentual.md"},i=s('<h1 id="docker-introducao-concentual" tabindex="-1">Docker - Introdu\xE7\xE3o Concentual <a class="header-anchor" href="#docker-introducao-concentual" aria-hidden="true">#</a></h1><p>Tenho estudado Docker com mais vontade de alguns meses pra c\xE1 (al\xE9m de trabalhar no dia a dia) e n\xE3o faz muito sentido fazer tudo isso se eu n\xE3o passar a diante.</p><p>Honestamente meu intuito \xE9 que este texto facilite um pouco sua vida, vou mesclar um pouco da minha experi\xEAncia que vai desde o desenvolvimento at\xE9 o Deploy para Produ\xE7\xE3o. No meio do caminho talvez eu cite ferramentas extras que tamb\xE9m podem ajud\xE1-lo (espero).</p><p>Este artigo faz parte da s\xE9rie <strong>Manual &quot;b\xE1sico&quot; de Docker</strong>. Digo b\xE1sico pois realmente h\xE1 muito mais do que pretendo escrever.</p><p>Duas observa\xE7\xF5es importantes sobre este projeto:</p><ol><li>N\xE3o ser\xE1 o estado da arte de primeira, n\xE3o espere isso. Ali\xE1s, suas id\xE9ias, coment\xE1rios e corre\xE7\xF5es ser\xE3o levados a s\xE9rio e revisarei o que for necess\xE1rio.</li><li>Eu n\xE3o tenho tanta pressa. Ao mesmo tempo que estou escrevendo, estou lendo mais e sempre reviso algumas partes, implemento, melhoro, etc. Ent\xE3o isso pode ficar um tanto extenso mas farei o poss\xEDvel para que valha seu tempo.</li></ol><h2 id="o-que-e-docker" tabindex="-1">O que \xE9 Docker? <a class="header-anchor" href="#o-que-e-docker" aria-hidden="true">#</a></h2><p>Como na pr\xF3pria documenta\xE7\xE3o:</p><blockquote><p>Docker \xE9 uma plataforma para criar, executar e compartilhar aplicativos em containers.</p></blockquote><p>Isso pode n\xE3o dizer muito ainda, mas de fato diz quase tudo.</p><p>Desenvolvido pela empresa <strong>Docker, Inc.</strong>, Docker \xE9 um software de administra\xE7\xE3o de cont\xEAineres que visa abstrair a camada de virtualiza\xE7\xE3o de uma forma que simplifique (MUITO) a vida de desenvolvedores e administradores de sistemas.</p><p>Voc\xEA j\xE1 deve ter usado ou visto uma m\xE1quina virtual. Daquelas que nos permitem rodar um sistema operacional sobre o outro, sabe? Tipo <strong>VirtualBox</strong>. Voc\xEA instala o VirtualBox no Windows e pode instalar outro Windows (espero que n\xE3o fa\xE7a) dentro dele.</p><p>Isso \xE9 bastante \xFAtil para fazer testes em ambientes diferentes do que voc\xEA est\xE1 usando e at\xE9 para rodar aplica\xE7\xF5es que n\xE3o funcionam no seu sistema atual. \xC9 diferente de uma m\xE1quina virtual, que executa um sistema operacional (guest OS) sobre o outro (host OS) e, s\xF3 depois, executa as aplica\xE7\xF5es.</p><p>Um cont\xEAiner tem a capacidade de se beneficiar do kernel do seu sistema host para executar aplica\xE7\xF5es.</p><p>Na imagem abaixo, fica um pouco mais claro:</p><p><img src="https://dev-to-uploads.s3.amazonaws.com/i/erzekt4smvip27horqb7.png" alt="https://dev-to-uploads.s3.amazonaws.com/i/erzekt4smvip27horqb7.png"></p><p>Comparativo entre a arquitetura de um sistema de cont\xEAineres versus arquitetura de um sistema virtualizado. Fonte: <a href="https://docs.docker.com/get-started/" target="_blank" rel="noreferrer">https://docs.docker.com/get-started/</a></p><p>Note que quando usamos uma m\xE1quina virtual com um sistema operacional inteiro e s\xF3 depois a aplica\xE7\xE3o desejada, estamos literalmente jogando fora uma grande quantidade de recursos de hardware que podem (e devem) ser melhor aproveitados. Al\xE9m de ser caro em recursos f\xEDsicos, \xE9 lento e pesado. Ou seja, fica muito mais complexo replicar, compartilhar e, claro, escalar utilizando uma arquitetura baseada em m\xE1quina virtuais.</p><p>Tudo que estamos falando agora, a respeito de cont\xEAineres n\xE3o \xE9 t\xE3o novo assim, e j\xE1 funcionava antes do Docker. O Unix permitia realizar essa tarefa nativamente atrav\xE9s do velho <code>chroot</code>, inclu\xEDdo em 1979, de forma limitada mas realiz\xE1vel. Melhorou no GNU/Linux, com a possibilidade de rodar processos isolados com o <code>cgroup</code>, desenvolvido pelo time de engenharia da Google em 2006 (talvez eu fa\xE7a isso manualmente e documento em um outro artigo).</p><p>Apesar de cont\xEAineres serem poss\xEDveis desde muito tempo atr\xE1s, n\xE3o eram uma tarefa simples de se realizar. At\xE9 que o Docker veio para facilitar tudo isso, abstraindo toda complexidade t\xE9cnica e nos permitindo usar os recursos e dedicar tempo em nossas pr\xF3prias aplica\xE7\xF5es. Por\xE9m, alguns conceitos precisam ser bem entendidos para se aprofundar melhor no mundo dos cont\xEAineres: a diferen\xE7a entre <strong>imagens</strong> e <strong>cont\xEAineres</strong>.</p><h2 id="imagens" tabindex="-1">Imagens <a class="header-anchor" href="#imagens" aria-hidden="true">#</a></h2><p>A abstra\xE7\xE3o n\xE3o est\xE1 apenas na execu\xE7\xE3o dos cont\xEAineres, como vimos at\xE9 agora, mas tamb\xE9m na cria\xE7\xE3o das imagens que s\xE3o utilizadas como base para a execu\xE7\xE3o deles. Imagem \xE9 uma esp\xE9cie de molde usado para a cria\xE7\xE3o das inst\xE2ncias (cont\xEAiner). Existem diversas imagens j\xE1 constru\xEDdas e podemos reaproveit\xE1-las para facilitar nossa vida. A Docker, Inc. \xE9 respons\xE1vel pelo maior hub de imagens oficiais e n\xE3o-oficiais, o <strong>Docker Hub</strong> (<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">https://hub.docker.com/</a>).</p><p>Imagens s\xE3o constru\xEDdas a partir de um arquivo de receita conhecido por Dockerfile. Em breve vamos come\xE7ar a escrever essas receitas e compreender maneiras boas e ruins de fazer diversas coisas, para diferentes cen\xE1rios.</p><h2 id="conteineres" tabindex="-1">Cont\xEAineres <a class="header-anchor" href="#conteineres" aria-hidden="true">#</a></h2><p>Damos o nome de cont\xEAiner a qualquer inst\xE2ncia criada a partir de um molde (imagem docker). Fazendo um paralelo com o paradigma de orienta\xE7\xE3o a objetos, a imagem docker \xE9 a classe enquanto que o objeto \xE9 o cont\xEAiner. Podemos ter diversos cont\xEAineres criados a partir da mesma imagem. Um cont\xEAiner permite executar a inst\xE2ncia de alguma coisa de forma isolada, flex\xEDvel e escal\xE1vel. Ele s\xF3 vive enquanto seu prop\xF3sito de execu\xE7\xE3o estiver, claro, em execu\xE7\xE3o.</p><p>Quando lidamos com containers, precisamos come\xE7ar considerando que os containers s\xF3 nascem para morrer. Ou seja, n\xE3o tenha apego emocional no planejamento, ele precisa nascer, executar e morrer. Voc\xEA pensando assim, come\xE7ar\xE1 a desenvolver aplica\xE7\xF5es cada vez mais &#39;conteineriz\xE1veis&#39;.</p>',26),t=[i];function n(d,c,m,u,p,l){return o(),a("div",null,t)}const g=e(r,[["render",n]]);export{h as __pageData,g as default};
