import{_ as s,c as a,o as e,d as n}from"./app.d643be22.js";const t="/me/assets/tdd-simple-diagram-v1.2c00f1dd.jpg",h=JSON.parse('{"title":"Testing and Mocking with Laravel","description":"","frontmatter":{},"headers":[{"level":2,"title":"Why to write tests?","slug":"why-to-write-tests","link":"#why-to-write-tests","children":[]},{"level":2,"title":"Testing a RestFul API","slug":"testing-a-restful-api","link":"#testing-a-restful-api","children":[{"level":3,"title":"Testing creation of resources","slug":"testing-creation-of-resources","link":"#testing-creation-of-resources","children":[]},{"level":3,"title":"Testing validations in creation of resources","slug":"testing-validations-in-creation-of-resources","link":"#testing-validations-in-creation-of-resources","children":[]},{"level":3,"title":"Testing retriving data -- TODO","slug":"testing-retriving-data-todo","link":"#testing-retriving-data-todo","children":[]},{"level":3,"title":"Testing updating data -- TODO","slug":"testing-updating-data-todo","link":"#testing-updating-data-todo","children":[]},{"level":3,"title":"Testing deleting data -- TODO","slug":"testing-deleting-data-todo","link":"#testing-deleting-data-todo","children":[]}]},{"level":2,"title":"Testing external services","slug":"testing-external-services","link":"#testing-external-services","children":[]}],"relativePath":"posts/2022/testing-and-mocking-with-laravel.md"}'),o={name:"posts/2022/testing-and-mocking-with-laravel.md"},l=n('<h1 id="testing-and-mocking-with-laravel" tabindex="-1">Testing and Mocking with Laravel <a class="header-anchor" href="#testing-and-mocking-with-laravel" aria-hidden="true">#</a></h1><p>Note: this post will be bigger and I&#39;m writing more and fixing errors weekly.</p><h2 id="why-to-write-tests" tabindex="-1">Why to write tests? <a class="header-anchor" href="#why-to-write-tests" aria-hidden="true">#</a></h2><p>Before all, let&#39;s talk a little bit about the important of automatized tests in our work.</p><p>To be honest, I don&#39;t know how I lived before without this. I spent a long time testing the things manually, broking the old codes, etc. And, maybe the worst, thinking wrong. I&#39;ll to explain.</p><p>When you do your test about something, you have the opportunity to really to think about the design of your real code, because you need do it simple, re-usable and with less dependences.</p><p>If you try do you test as TDD, making your test first and just after write your real code. Improving and testing again, it&#39;s so more easly do a refactor in &#39;task time&#39;, keeping less issues to the future.</p><p><img src="'+t+`" alt="Image of TDD Flow"></p><p>Here, I&#39;ll put my personal good points about, why we need write tests:</p><ul><li>Help to do make good deliveries;</li><li>Can to refactor without fear;</li><li>Improve your code design - your test is the first &#39;customer&#39; of your implementation;</li><li>Improve your code design - you will to think better to make your code easily to be tested;</li><li>If you to write one test for each new bug foun, maybe you never more will take the same bugs.</li></ul><h2 id="testing-a-restful-api" tabindex="-1">Testing a RestFul API <a class="header-anchor" href="#testing-a-restful-api" aria-hidden="true">#</a></h2><p>A simple way to test our REST API&#39;s and try keep safe some business contractor about attributes and API behavior is with Features tests.</p><p>I like most simple as possible and I&#39;ll show you some crud examples here!</p><h3 id="testing-creation-of-resources" tabindex="-1">Testing creation of resources <a class="header-anchor" href="#testing-creation-of-resources" aria-hidden="true">#</a></h3><p>For the simple cases, the main goal about the a creation of some resource is store the data inside our database, we can start with something like this:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testCreateTask</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">factory</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// using Factory to built a object of something</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#82AAFF;">postJson</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/tasks</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">toArray</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// making a HTTP POST call with our task to create</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">assertCreated</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// asserting if the HTTP response was correct </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#82AAFF;">assertDatabaseHas</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tasks</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">toArray</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// checking if the data was stored in database</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Let&#39;s check some important points here:</p><ul><li>Use factory to deal with our resources;</li><li>Asserting correct response of our call;</li><li>Asserting if the data was stored in database.</li></ul><p>It&#39;s really simple but power, of course we can improve this and also we need more tests to ensure complete our API cases.</p><h3 id="testing-validations-in-creation-of-resources" tabindex="-1">Testing validations in creation of resources <a class="header-anchor" href="#testing-validations-in-creation-of-resources" aria-hidden="true">#</a></h3><p>Usually we need to validate the data before try store in database, usually we do it with custom Requests or with basic Validators. In all cases, we can to delivery a status <code>422</code> if the data is not valid and also we can built some test to validate it:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testCreateTaskReturning422WhenDataWasInvalid</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tite</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">title of task with attribute name wrong</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#82AAFF;">postJson</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/tasks</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// making a HTTP POST call with our wrong task to create</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">assertUnprocessable</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// asserting if the HTTP response is 422</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>It&#39;s really simple, we can improve this with validations of the response messages but this is a good start to ensure the basic of your validations.</p><h3 id="testing-retriving-data-todo" tabindex="-1">Testing retriving data -- TODO <a class="header-anchor" href="#testing-retriving-data-todo" aria-hidden="true">#</a></h3><h3 id="testing-updating-data-todo" tabindex="-1">Testing updating data -- TODO <a class="header-anchor" href="#testing-updating-data-todo" aria-hidden="true">#</a></h3><h3 id="testing-deleting-data-todo" tabindex="-1">Testing deleting data -- TODO <a class="header-anchor" href="#testing-deleting-data-todo" aria-hidden="true">#</a></h3><h2 id="testing-external-services" tabindex="-1">Testing external services <a class="header-anchor" href="#testing-external-services" aria-hidden="true">#</a></h2><p>Working with micro-services or external services integrated, sometimes we need to simulate the behavior of some resources, for example, HTTP calls. The mock is a way to simulate this and ensure the quality of your feature without to need the external resource inside your test.</p><p>Let&#39;s to say that you have a integration with Stripe Payments and you need to test your software but don&#39;t want to create a new customer or new billings every time when you run your tests. To do it, we need mock the Stripe behavior.</p><p>In my example, I&#39;m using the Cashier to abstract the Stripe things, because this, I created a Service called PremiumService to abstract the Cashier functions and I mocked just the PremiumService.</p><p>To simplify our life, I like to create the mocks inside some Trait to just &#39;enable&#39; inside my tests, like this:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Tests</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Traits</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">App</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Services</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">PremiumService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StripeMock</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setStripeMock</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#82AAFF;">mock</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">PremiumService</span><span style="color:#89DDFF;">::</span><span style="color:#F78C6C;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">mock</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">mock</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">shouldReceive</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">createAsStripeCustomer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">andReturn</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">mock</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">shouldReceive</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cancelProductSubscription</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">andReturn</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">mock</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">shouldReceive</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">createStripeSubscription</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">andReturn</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">mock</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">mock</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">shouldReceive</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">getActiveSubscriptions</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">andReturn</span><span style="color:#89DDFF;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sub</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">items</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">21</span><span style="color:#89DDFF;">]]],</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">})-&gt;</span><span style="color:#82AAFF;">makePartial</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>With this, inside my tests of stripe, I just need need import the Trait and run <code>$this-&gt;setStripeMock();</code> to &#39;enable&#39; mock.</p><p>Let&#39;s to try understand the mock now.</p><p>In the first mock line <code>$this-&gt;mock(PremiumService::class, function ($mock)</code> we are creating the simulation of <code>PremiumService</code>, this way when the application initiate the Class, the mock will be used instead of real Class.</p><p>Inside of mock, we have defined the behavior about each method, like:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">mock</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">shouldReceive</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">createAsStripeCustomer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">andReturn</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p>It means that when call the method <code>createAsStripeCustomer</code>, the return will be void as expected in real code. But if you check the <code>getActiveSubscriptions</code>, we have a simple data returning simulating the original behavior.</p><p>To clarify more, the PremiumService is just one Class to abstract the <code>Cashier</code> methods, like this:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// PremiumService</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getActiveSubscriptions</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Company</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">company</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">company</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">subscriptions</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">active</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><hr><p>Here you can lean more about tests, I listed some good articles to help you:</p><p><a href="https://ralphjsmit.com/laravel-mock-dependencies" target="_blank" rel="noreferrer">https://ralphjsmit.com/laravel-mock-dependencies</a></p><p><a href="https://5balloons.info/how-to-mock-objects-in-phpunit-pest-tests-in-laravel" target="_blank" rel="noreferrer">https://5balloons.info/how-to-mock-objects-in-phpunit-pest-tests-in-laravel</a></p><p><a href="https://medium.com/the-andela-way/mock-testing-in-laravel-4a2fe15885b8" target="_blank" rel="noreferrer">https://medium.com/the-andela-way/mock-testing-in-laravel-4a2fe15885b8</a></p>`,45),p=[l];function r(c,i,D,y,F,d){return e(),a("div",null,p)}const C=s(o,[["render",r]]);export{h as __pageData,C as default};
